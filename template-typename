#ifndef _TCOLL_T_
#define _TCOLL_T_

#include <iostream>
#include "../funciones/strings.hpp"

using namespace std;

template<typename T>
struct Coll
{
   string s;
   char sep;
};

// collCreate
template<typename T>
Coll<T> collCreate()
{
   Coll<T> x;
   x.s = "";
   x.sep = '|';
   x.i = 0;
   return x;
}

template<typename T>
int collSize(Coll<T> c)
{
   return tokenCount(c.s,c.sep);
}

template<typename T>
void collRemoveAll(Coll<T>& c)
{
   c.s = "";
}

template<typename T>
void collRemoveAt(Coll<T>& c, int p)
{
   removeTokenAt(c.s,c.sep,p);
}

template <typename T>
bool collHasNext (Coll<T> c)
{
   bool r = false;
   if (getTokenAt (c.s,c.sep,c.i)!= "")
   {
      r = true;
   }
   return r;
}

template <typename T>
T collNext(Coll<T>& c, T tFromString(string s))
{
   T x;
   x = tFromString(getTokenAt(c.s,c.sep,c.i));
   c.i++;
   return x;
}

template <typename T>
void collReset(Coll<T>& c)
{
   c.i = 0;
}

// --[collString]--
template<typename T>
void collAddString(Coll<string>& c, string s)
{
   addToken(c.s,c.sep,s);
}

template<typename T>
void collSetStringAt(Coll<string>& c, string s, int p)
{
   setTokenAt(c.s,c.sep,s,p);
}

template<typename T>
string collGetStringAt(Coll<string> c, int p)
{
   return getTokenAt(c.s,c.sep,p);
}

template<typename T>
int collFindString(Coll<string> c, string x)
{
   return findToken(c.s,c.sep,x);
}

// --[/collString]--

// --[collInt]--
template<typename T>
void collAddInt(Coll<int>& c, int n)
{
   addToken(c.s,c.sep,intToString(n));
}

template<typename T>
void collSetIntAt(Coll<int>& c, int i, int p)
{
   setTokenAt(c.s,c.sep,intToString(i),p);
}

template<typename T>
int collGetIntAt(Coll<int> c, int p)
{
   return stringToInt(getTokenAt(c.s,c.sep,p));
}

template<typename T>
int collFindInt(Coll<int> c, int x)
{
   return findToken(c.s,c.sep,intToString(x));
}

// --[/collInt]--

// -- [GENERICAS] --

template<typename T>
void collAdd(Coll<T>& c,T t,string tToString(T))
{
   addToken(c.s,c.sep,tToString(t));
}

template <typename T>
void collSetAt(Coll<T>& c,T t, int p, string tToString(T))
{
   setTokenAt(c.s,c.sep,tToString(t),p);
}

template <typename T>
T collGetAt(Coll<T> c, int p, T tFromString(string))
{
   T x = tFromString(getTokenAt(c.s,c.sep,p));
   return x;
}

template <typename T, typename K>
int collFind(Coll<T> c, K k, int cmpTK(T,K), T tFromString(string))
{
   int p = 1;
   for (int i = 0; i<collSize(c); i++)
   {
      T t = tFromString (getTokenAt(c.s,c.sep,i));
      if (cmpTK(t,k) == 0)
      {
         if (p<0)
         {
            p = i;
         }
      }
   }
   return p;
}

template <typename T>
void collSort(Coll<T>& c, int cmpTT(T,T),T tFromString(string),string tToString(T))
{
   for (int i = 0; i<collSize(c); i++)
   {
      for (int j = 0; i<collSize(c)-1; i++ )
      {
         T t1 = collGetAt<T>(c,j,tFromString);
         T t2 = collGetAt<T>(c,j+1,tFromString);
         if (cmpTT(t1,t2)>0 )
         {
            collSetAt<T>(c,t1,j+1,tToString);
            collSetAt<T>(c,t2,j,tToString);
         }
      }
   }
}

#endif
